return {
  "folke/which-key.nvim",
  lazy = true,
  event = "VeryLazy",
  keys = {
    { "<leader>/", "<cmd>lua require('Comment.api').toggle.linewise.current()<CR>", desc = "Comment",   nowait = true, remap = false },
    { "<leader>;", "<cmd>Alpha<CR>",                                                desc = "Dashboard", nowait = true, remap = false },
    {
      "<leader>P",
      "<cmd>lua require('telescope.builtin').git_files(require('telescope.themes').get_dropdown{previewer = false})<cr>",
      desc = "Git Files",
      nowait = true,
      remap = false
    },
    { "<leader>T",  group = "Treesitter",                                nowait = true,                       remap = false },
    { "<leader>Ti", ":TSConfigInfo<cr>",                                 desc = "Info",                       nowait = true, remap = false },
    { "<leader>b",  group = "Buffers",                                   nowait = true,                       remap = false },
    { "<leader>bD", "<cmd>BufferLineSortByDirectory<cr>",                desc = "Sort by directory",          nowait = true, remap = false },
    { "<leader>bL", "<cmd>BufferLineSortByExtension<cr>",                desc = "Sort by language",           nowait = true, remap = false },
    { "<leader>bb", "<cmd>BufferLineCyclePrev<cr>",                      desc = "Previous",                   nowait = true, remap = false },
    { "<leader>be", "<cmd>BufferLinePickClose<cr>",                      desc = "Pick which buffer to close", nowait = true, remap = false },
    { "<leader>bf", "<cmd>Telescope buffers<cr>",                        desc = "Find",                       nowait = true, remap = false },
    { "<leader>bh", "<cmd>BufferLineCloseLeft<cr>",                      desc = "Close all to the left",      nowait = true, remap = false },
    { "<leader>bj", "<cmd>BufferLinePick<cr>",                           desc = "Jump",                       nowait = true, remap = false },
    { "<leader>bl", "<cmd>BufferLineCloseRight<cr>",                     desc = "Close all to the right",     nowait = true, remap = false },
    { "<leader>c",  group = "CompetiTest",                               nowait = true,                       remap = false },
    { "<leader>ca", "<cmd>CompetiTest add_testcase<cr>",                 desc = "Add Test",                   nowait = true, remap = false },
    { "<leader>cd", "<cmd>CompetiTest delete_testcase<cr>",              desc = "Delete Test",                nowait = true, remap = false },
    { "<leader>ce", "<cmd>CompetiTest edit_testcase<cr>",                desc = "Edit Test",                  nowait = true, remap = false },
    { "<leader>cr", "<cmd>CompetiTest run<cr>",                          desc = "Run Tests",                  nowait = true, remap = false },
    { "<leader>ct", "<cmd>CompetiTest receive testcases<cr>",            desc = "Receive Testcases",          nowait = true, remap = false },
    { "<leader>e",  "<cmd>NvimTreeToggle<cr>",                           desc = "Explorer",                   nowait = true, remap = false },
    { "<leader>f",  group = "Flutter Tools",                             nowait = true,                       remap = false },
    { "<leader>fP", "<cmd> FlutterPubUpgrade <cr>",                      desc = "Flutter Pub Upgrade",        nowait = true, remap = false },
    { "<leader>fR", "<cmd> FlutterReload <cr>",                          desc = "Flutter Reload",             nowait = true, remap = false },
    { "<leader>fp", "<cmd> FlutterPubGet <cr>",                          desc = "Fluttetr Pub Get",           nowait = true, remap = false },
    { "<leader>fq", "<cmd> FlutterQuit <cr>",                            desc = "Flutter Quit",               nowait = true, remap = false },
    { "<leader>fr", "<cmd> FlutterRun <cr>",                             desc = "Flutter Run",                nowait = true, remap = false },
    { "<leader>g",  group = "Git",                                       nowait = true,                       remap = false },
    { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>",    desc = "Reset Buffer",               nowait = true, remap = false },
    { "<leader>gb", "<cmd>Telescope git_branches<cr>",                   desc = "Checkout branch",            nowait = true, remap = false },
    { "<leader>gc", "<cmd>Telescope git_commits<cr>",                    desc = "Checkout commit",            nowait = true, remap = false },
    { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>",                   desc = "Git Diff",                   nowait = true, remap = false },
    { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>",       desc = "Next Hunk",                  nowait = true, remap = false },
    { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>",       desc = "Prev Hunk",                  nowait = true, remap = false },
    { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>",      desc = "Blame",                      nowait = true, remap = false },
    { "<leader>go", "<cmd>Telescope git_status<cr>",                     desc = "Open changed file",          nowait = true, remap = false },
    { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>",    desc = "Preview Hunk",               nowait = true, remap = false },
    { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>",      desc = "Reset Hunk",                 nowait = true, remap = false },
    { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>",      desc = "Stage Hunk",                 nowait = true, remap = false },
    { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk",            nowait = true, remap = false },
    { "<leader>h",  "<cmd>nohlsearch<CR>",                               desc = "No Highlight",               nowait = true, remap = false },
    { "<leader>l",  group = "LSP",                                       nowait = true,                       remap = false },
    { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",  desc = "Workspace Symbols",          nowait = true, remap = false },
    { "<leader>ld", "<cmd>Telescope lsp_document_diagnostics<cr>",       desc = "Document Diagnostics",       nowait = true, remap = false },
    { "<leader>le", "<cmd>Telescope quickfix<cr>",                       desc = "Telescope Quickfix",         nowait = true, remap = false },
    { "<leader>lf", "<cmd>lua vim.lsp.buf.format()<cr>",                 desc = "Format",                     nowait = true, remap = false },
    { "<leader>li", "<cmd>LspInfo<cr>",                                  desc = "Info",                       nowait = true, remap = false },
    { "<leader>lj", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>",       desc = "Next Diagnostic",            nowait = true, remap = false },
    { "<leader>lk", "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>",       desc = "Prev Diagnostic",            nowait = true, remap = false },
    { "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>",               desc = "CodeLens Action",            nowait = true, remap = false },
    { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>",          desc = "Quickfix",                   nowait = true, remap = false },
    { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>",                 desc = "Rename",                     nowait = true, remap = false },
    { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>",           desc = "Document Symbols",           nowait = true, remap = false },
    { "<leader>lw", "<cmd>Telescope lsp_workspace_diagnostics<cr>",      desc = "Workspace Diagnostics",      nowait = true, remap = false },
    { "<leader>q",  "<cmd>q!<CR>",                                       desc = "Quit",                       nowait = true, remap = false },
    { "<leader>t",  group = "Telescope",                                 nowait = true,                       remap = false },
    { "<leader>tC", "<cmd>Telescope commands<cr>",                       desc = "Commands",                   nowait = true, remap = false },
    { "<leader>tH", "<cmd>Telescope highlights<cr>",                     desc = "Find highlight groups",      nowait = true, remap = false },
    { "<leader>tM", "<cmd>Telescope man_pages<cr>",                      desc = "Man Pages",                  nowait = true, remap = false },
    { "<leader>tR", "<cmd>Telescope registers<cr>",                      desc = "Registers",                  nowait = true, remap = false },
    { "<leader>tb", "<cmd>Telescope git_branches<cr>",                   desc = "Checkout branch",            nowait = true, remap = false },
    { "<leader>tc", "<cmd>Telescope colorscheme<cr>",                    desc = "Colorscheme",                nowait = true, remap = false },
    { "<leader>tf", "<cmd>Telescope find_files<cr>",                     desc = "Find File",                  nowait = true, remap = false },
    { "<leader>th", "<cmd>Telescope help_tags<cr>",                      desc = "Find Help",                  nowait = true, remap = false },
    { "<leader>tk", "<cmd>Telescope keymaps<cr>",                        desc = "Keymaps",                    nowait = true, remap = false },
    {
      "<leader>tp",
      "<cmd>lua require('telescope.builtin').colorscheme({enable_preview = true})<cr>",
      desc = "Colorscheme with Preview",
      nowait = true,
      remap = false
    },
    { "<leader>tr", "<cmd>Telescope oldfiles<cr>",  desc = "Open Recent File", nowait = true, remap = false },
    { "<leader>tt", "<cmd>Telescope live_grep<cr>", desc = "Text",             nowait = true, remap = false },
    { "<leader>w",  "<cmd>w!<CR>",                  desc = "Save",             nowait = true, remap = false },
    { "<leader>x",  "<cmd>bdelete!<CR>",            desc = "Close Buffer",     nowait = true, remap = false },
  },
}
